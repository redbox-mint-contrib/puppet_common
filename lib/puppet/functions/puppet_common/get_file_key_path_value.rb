# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'puppet_common::get_file_key_path_value') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    
    raise(Puppet::ParseError, "prefix(): Wrong number of arguments " +
    "given (#{arguments.size} instead of 2)") if arguments.size != 2

    file_path = arguments[0]
    key_path = arguments[1]

    config = function_parsejson([function_file([file_path])])
    value = function_try_get_value([config, key_path, "not found"])
      
    if value == "not found"
#      raise Puppet::ParseError, __method__.to_s + "(): unable to find #{key_path} in #{file_path}"
      raise Puppet::ParseError, __method__.to_s + "(): #{config}"
    end

    return value

  
  end
end
