# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
## args : full file path, including filename
require 'fileutils'
# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'puppet_common::module_component_exists') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
     Puppet::Parser::Functions.function('get_module_path')
     unless args.length == 2
       puts "Usage: module_component_exists.rb <module_name> <component relative path>\n"
       exit
     end
     module_path = function_get_module_path( [ args[0]] )
     path_to_check = File.join(module_path, args[1])
     File.exists?(path_to_check)
   
  end
end
